nohup: ignoring input
🚀 MBPP BTP实验配置:
  模型: deepseek-ai/deepseek-coder-1.3b-instruct
  模式: finetune
  最大问题数: 100
  采样方法: power
  采样Alpha: 1.0
  P2Value Alpha: 0.5
  输出目录: ./mbpp_btp_checkpoints_alpha0.1
💡 优化建议:
   - DeepSeek-Coder建议使用few-shot examples以获得更好性能
🔧 加载本地模型: deepseek-ai/deepseek-coder-1.3b-instruct
Running on: cuda
⚠️  LoRA微调仅支持本地模型
🚀 初始化完成:
   模型: deepseek-ai/deepseek-coder-1.3b-instruct
   家族: deepseek
   类型: instruct
   输出目录: ./mbpp_btp_checkpoints_alpha0.1
   优化参数: {'temperature': 0.6, 'max_tokens': 512, 'top_p': 0.95, 'num_beams': 5, 'batch_size': 1, 'timeout': 30, 'use_examples': True, 'examples_count': 3}
开始运行BTP实验，共 100 个问题
🔍 阶段1: Beam Search采样
Beam Search采样:   0%|          | 0/100 [00:00<?, ?it/s]Beam Search采样:   1%|          | 1/100 [00:10<17:06, 10.37s/it]Beam Search采样:   2%|▏         | 2/100 [00:15<12:14,  7.50s/it]Beam Search采样:   3%|▎         | 3/100 [00:22<11:20,  7.02s/it]Beam Search采样:   4%|▍         | 4/100 [00:29<11:11,  6.99s/it]Beam Search采样:   5%|▌         | 5/100 [00:35<10:29,  6.63s/it]Beam Search采样:   6%|▌         | 6/100 [00:41<10:09,  6.49s/it]Beam Search采样:   7%|▋         | 7/100 [00:43<07:49,  5.04s/it]Beam Search采样:   8%|▊         | 8/100 [00:48<07:42,  5.03s/it]Beam Search采样:   9%|▉         | 9/100 [00:51<06:44,  4.45s/it]Beam Search采样:  10%|█         | 10/100 [00:54<05:50,  3.90s/it]Beam Search采样:  11%|█         | 11/100 [00:57<05:37,  3.79s/it]Beam Search采样:  12%|█▏        | 12/100 [01:02<05:43,  3.91s/it]Beam Search采样:  13%|█▎        | 13/100 [01:06<06:04,  4.19s/it]Beam Search采样:  14%|█▍        | 14/100 [01:10<05:32,  3.86s/it]Beam Search采样:  15%|█▌        | 15/100 [01:13<05:06,  3.60s/it]Beam Search采样:  16%|█▌        | 16/100 [01:17<05:31,  3.95s/it]Beam Search采样:  17%|█▋        | 17/100 [01:21<05:11,  3.76s/it]Beam Search采样:  18%|█▊        | 18/100 [01:24<05:03,  3.70s/it]Beam Search采样:  19%|█▉        | 19/100 [01:29<05:35,  4.14s/it]Beam Search采样:  20%|██        | 20/100 [01:33<05:16,  3.96s/it]Beam Search采样:  21%|██        | 21/100 [01:43<07:46,  5.91s/it]Beam Search采样:  22%|██▏       | 22/100 [01:48<07:01,  5.40s/it]Beam Search采样:  23%|██▎       | 23/100 [01:50<05:58,  4.66s/it]Beam Search采样:  24%|██▍       | 24/100 [01:56<06:20,  5.00s/it]Beam Search采样:  25%|██▌       | 25/100 [02:01<06:12,  4.96s/it]Beam Search采样:  26%|██▌       | 26/100 [02:10<07:36,  6.17s/it]Beam Search采样:  27%|██▋       | 27/100 [02:15<07:12,  5.92s/it]Beam Search采样:  28%|██▊       | 28/100 [02:20<06:31,  5.43s/it]Beam Search采样:  29%|██▉       | 29/100 [02:28<07:33,  6.39s/it]Beam Search采样:  30%|███       | 30/100 [02:34<07:07,  6.10s/it]Beam Search采样:  31%|███       | 31/100 [02:38<06:23,  5.55s/it]Beam Search采样:  32%|███▏      | 32/100 [02:45<06:35,  5.81s/it]Beam Search采样:  33%|███▎      | 33/100 [02:51<06:39,  5.96s/it]Beam Search采样:  34%|███▍      | 34/100 [02:56<06:15,  5.69s/it]Beam Search采样:  35%|███▌      | 35/100 [03:01<05:55,  5.46s/it]Beam Search采样:  36%|███▌      | 36/100 [03:04<04:57,  4.64s/it]Beam Search采样:  37%|███▋      | 37/100 [03:08<04:48,  4.58s/it]Beam Search采样:  38%|███▊      | 38/100 [03:13<04:47,  4.64s/it]Beam Search采样:  39%|███▉      | 39/100 [03:18<04:55,  4.84s/it]Beam Search采样:  40%|████      | 40/100 [03:23<04:56,  4.94s/it]Beam Search采样:  41%|████      | 41/100 [03:29<05:04,  5.16s/it]Beam Search采样:  42%|████▏     | 42/100 [03:32<04:16,  4.41s/it]Beam Search采样:  43%|████▎     | 43/100 [03:35<03:53,  4.10s/it]Beam Search采样:  44%|████▍     | 44/100 [03:41<04:17,  4.60s/it]Beam Search采样:  45%|████▌     | 45/100 [03:46<04:28,  4.87s/it]Beam Search采样:  46%|████▌     | 46/100 [03:51<04:27,  4.96s/it]Beam Search采样:  47%|████▋     | 47/100 [03:57<04:31,  5.13s/it]Beam Search采样:  48%|████▊     | 48/100 [04:00<03:55,  4.52s/it]Beam Search采样:  49%|████▉     | 49/100 [04:04<03:35,  4.23s/it]Beam Search采样:  50%|█████     | 50/100 [04:12<04:41,  5.63s/it]Beam Search采样:  51%|█████     | 51/100 [04:17<04:12,  5.15s/it]Beam Search采样:  52%|█████▏    | 52/100 [04:19<03:33,  4.44s/it]Beam Search采样:  53%|█████▎    | 53/100 [04:23<03:22,  4.30s/it]Beam Search采样:  54%|█████▍    | 54/100 [04:27<03:07,  4.08s/it]Beam Search采样:  55%|█████▌    | 55/100 [04:31<03:10,  4.23s/it]Beam Search采样:  56%|█████▌    | 56/100 [04:34<02:44,  3.75s/it]Beam Search采样:  57%|█████▋    | 57/100 [04:40<03:04,  4.30s/it]Beam Search采样:  58%|█████▊    | 58/100 [04:43<02:51,  4.09s/it]Beam Search采样:  59%|█████▉    | 59/100 [04:46<02:33,  3.75s/it]Beam Search采样:  60%|██████    | 60/100 [04:51<02:41,  4.03s/it]Beam Search采样:  61%|██████    | 61/100 [04:58<03:10,  4.89s/it]Beam Search采样:  62%|██████▏   | 62/100 [05:01<02:47,  4.41s/it]Beam Search采样:  63%|██████▎   | 63/100 [05:08<03:16,  5.31s/it]Beam Search采样:  64%|██████▍   | 64/100 [05:12<02:47,  4.64s/it]Beam Search采样:  65%|██████▌   | 65/100 [05:16<02:43,  4.68s/it]Beam Search采样:  66%|██████▌   | 66/100 [05:19<02:16,  4.00s/it]Beam Search采样:  67%|██████▋   | 67/100 [05:25<02:36,  4.75s/it]Beam Search采样:  68%|██████▊   | 68/100 [05:29<02:20,  4.38s/it]Beam Search采样:  69%|██████▉   | 69/100 [05:31<01:55,  3.72s/it]Beam Search采样:  70%|███████   | 70/100 [05:37<02:12,  4.41s/it]Beam Search采样:  71%|███████   | 71/100 [05:44<02:28,  5.13s/it]Beam Search采样:  72%|███████▏  | 72/100 [05:46<02:00,  4.31s/it]Beam Search采样:  73%|███████▎  | 73/100 [05:49<01:41,  3.76s/it]Beam Search采样:  74%|███████▍  | 74/100 [05:54<01:49,  4.21s/it]Beam Search采样:  75%|███████▌  | 75/100 [05:57<01:40,  4.01s/it]Beam Search采样:  76%|███████▌  | 76/100 [06:00<01:25,  3.55s/it]Beam Search采样:  77%|███████▋  | 77/100 [06:08<01:51,  4.85s/it]Beam Search采样:  78%|███████▊  | 78/100 [06:12<01:45,  4.80s/it]Beam Search采样:  79%|███████▉  | 79/100 [06:15<01:27,  4.15s/it]Beam Search采样:  80%|████████  | 80/100 [06:18<01:13,  3.68s/it]Beam Search采样:  81%|████████  | 81/100 [06:21<01:09,  3.65s/it]Beam Search采样:  82%|████████▏ | 82/100 [06:24<01:03,  3.52s/it]Beam Search采样:  83%|████████▎ | 83/100 [06:27<00:52,  3.09s/it]Beam Search采样:  84%|████████▍ | 84/100 [06:31<00:54,  3.42s/it]Beam Search采样:  85%|████████▌ | 85/100 [06:34<00:52,  3.51s/it]Beam Search采样:  86%|████████▌ | 86/100 [06:38<00:48,  3.44s/it]Beam Search采样:  87%|████████▋ | 87/100 [06:47<01:08,  5.23s/it]Beam Search采样:  88%|████████▊ | 88/100 [06:51<00:56,  4.73s/it]Beam Search采样:  89%|████████▉ | 89/100 [06:54<00:47,  4.34s/it]Beam Search采样:  90%|█████████ | 90/100 [06:59<00:43,  4.40s/it]Beam Search采样:  91%|█████████ | 91/100 [07:03<00:38,  4.25s/it]Beam Search采样:  92%|█████████▏| 92/100 [07:06<00:31,  3.90s/it]Beam Search采样:  93%|█████████▎| 93/100 [07:09<00:26,  3.85s/it]Beam Search采样:  94%|█████████▍| 94/100 [07:18<00:32,  5.38s/it]Beam Search采样:  95%|█████████▌| 95/100 [07:21<00:22,  4.48s/it]Beam Search采样:  96%|█████████▌| 96/100 [07:32<00:26,  6.60s/it]Beam Search采样:  97%|█████████▋| 97/100 [07:36<00:17,  5.83s/it]Beam Search采样:  98%|█████████▊| 98/100 [07:49<00:15,  7.79s/it]Beam Search采样:  99%|█████████▉| 99/100 [07:53<00:06,  6.69s/it]Beam Search采样: 100%|██████████| 100/100 [08:01<00:00,  7.23s/it]Beam Search采样: 100%|██████████| 100/100 [08:01<00:00,  4.82s/it]
🎯 阶段2: 优先经验回放训练 (3 轮迭代)

📈 迭代 1/3
📊 采样了 50 个经验用于训练
⚠️  微调仅支持本地模型
✅ 迭代 1 微调完成

📈 迭代 2/3
📊 采样了 50 个经验用于训练
⚠️  微调仅支持本地模型
✅ 迭代 2 微调完成

📈 迭代 3/3
📊 采样了 50 个经验用于训练
⚠️  微调仅支持本地模型
✅ 迭代 3 微调完成

================================================================================
🔍 生成代码样本分析 (用于调试0%通过率问题)
================================================================================

📝 样本 1:
   问题ID: 12
   通过率: 1.00
   生成概率: 0.9999
   生成代码:
   ------------------------------------------------------------
   def sort_matrix(matrix):
       return sorted(matrix, key=sum)
   
   # Test cases
   print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]
   print(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
   print(sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]
   ------------------------------------------------------------
   测试结果: 3/3 通过

📝 样本 2:
   问题ID: 12
   通过率: 1.00
   生成概率: 0.9999
   生成代码:
   ------------------------------------------------------------
   def sort_matrix(matrix):
       return sorted(matrix, key=sum)
   
   # Test cases
   print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]
   print(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
   print(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]
   ------------------------------------------------------------
   测试结果: 3/3 通过

📝 样本 3:
   问题ID: 12
   通过率: 1.00
   生成概率: 0.9999
   生成代码:
   ------------------------------------------------------------
   def sort_matrix(matrix):
       return sorted(matrix, key=sum)
   
   print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))
   print(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))
   print(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))
   ------------------------------------------------------------
   测试结果: 3/3 通过

📝 样本 4:
   问题ID: 12
   通过率: 1.00
   生成概率: 0.9999
   生成代码:
   ------------------------------------------------------------
   def sort_matrix(matrix):
       return sorted(matrix, key=sum)
   
   # Test cases
   print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]
   print(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
   print(sort_matrix([[5, 8, 9],[6, 4, 3],[2, 1, 4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]
   ------------------------------------------------------------
   测试结果: 3/3 通过

📝 样本 5:
   问题ID: 12
   通过率: 1.00
   生成概率: 0.9999
   生成代码:
   ------------------------------------------------------------
   def sort_matrix(matrix):
       return sorted(matrix, key=sum)
   
   print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))
   print(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))
   print(sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))
   ------------------------------------------------------------
   测试结果: 3/3 通过
================================================================================
✅ 结果已保存到: experiments/mbpp/results/btp_experiment_results_20250719_074244.json

✅ 实验完成!
📊 实验统计:
  total_experiences: 500
  avg_p2value: 0.7661911908562867
  max_p2value: 0.9999790523868666
  min_p2value: 0.49946185417014244
  avg_pass_rate: 0.5326666666666667
  fully_passed_count: 238
  zero_passed_count: 200
  sample_experiences: [{'problem_id': '12', 'problem_text': 'Write a function to sort a given matrix in ascending order according to the sum of its rows.', 'code': 'def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nprint(sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]', 'possibility': 0.9999217817500924, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]': {'result': True, 'time': 0.06224179267883301, 'error': None}, 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]': {'result': True, 'time': 0.05438375473022461, 'error': None}, 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]': {'result': True, 'time': 0.05635523796081543, 'error': None}}, 'beam_rank': 0, 'p2value': 0.9999608908750461}, {'problem_id': '12', 'problem_text': 'Write a function to sort a given matrix in ascending order according to the sum of its rows.', 'code': 'def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nprint(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]', 'possibility': 0.9999022914967196, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]': {'result': True, 'time': 0.04700803756713867, 'error': None}, 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]': {'result': True, 'time': 0.04700970649719238, 'error': None}, 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]': {'result': True, 'time': 0.04437828063964844, 'error': None}}, 'beam_rank': 1, 'p2value': 0.9999511457483599}, {'problem_id': '12', 'problem_text': 'Write a function to sort a given matrix in ascending order according to the sum of its rows.', 'code': 'def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\nprint(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))', 'possibility': 0.999877406888839, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]': {'result': True, 'time': 0.04978466033935547, 'error': None}, 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]': {'result': True, 'time': 0.04458737373352051, 'error': None}, 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]': {'result': True, 'time': 0.04230761528015137, 'error': None}}, 'beam_rank': 2, 'p2value': 0.9999387034444195}, {'problem_id': '12', 'problem_text': 'Write a function to sort a given matrix in ascending order according to the sum of its rows.', 'code': 'def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nprint(sort_matrix([[5, 8, 9],[6, 4, 3],[2, 1, 4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]', 'possibility': 0.9998763689171072, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]': {'result': True, 'time': 0.0420379638671875, 'error': None}, 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]': {'result': True, 'time': 0.041837453842163086, 'error': None}, 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]': {'result': True, 'time': 0.0414581298828125, 'error': None}}, 'beam_rank': 3, 'p2value': 0.9999381844585535}, {'problem_id': '12', 'problem_text': 'Write a function to sort a given matrix in ascending order according to the sum of its rows.', 'code': 'def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\nprint(sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))', 'possibility': 0.9998736990038587, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]': {'result': True, 'time': 0.04155540466308594, 'error': None}, 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]': {'result': True, 'time': 0.04096579551696777, 'error': None}, 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]': {'result': True, 'time': 0.04115891456604004, 'error': None}}, 'beam_rank': 4, 'p2value': 0.9999368495019294}, {'problem_id': '17', 'problem_text': 'Write a function to find the perimeter of a square.', 'code': 'def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test cases\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16', 'possibility': 0.9996118710134858, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert square_perimeter(10)==40': {'result': True, 'time': 0.0501255989074707, 'error': None}, 'assert square_perimeter(5)==20': {'result': True, 'time': 0.041413307189941406, 'error': None}, 'assert square_perimeter(4)==16': {'result': True, 'time': 0.04019045829772949, 'error': None}}, 'beam_rank': 0, 'p2value': 0.9998059355067429}, {'problem_id': '17', 'problem_text': 'Write a function to find the perimeter of a square.', 'code': 'def square_perimeter(side):\n    return 4 * side\n\n# Test cases\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16', 'possibility': 0.9996075600401905, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert square_perimeter(10)==40': {'result': True, 'time': 0.03998160362243652, 'error': None}, 'assert square_perimeter(5)==20': {'result': True, 'time': 0.039551734924316406, 'error': None}, 'assert square_perimeter(4)==16': {'result': True, 'time': 0.039609670639038086, 'error': None}}, 'beam_rank': 1, 'p2value': 0.9998037800200952}, {'problem_id': '17', 'problem_text': 'Write a function to find the perimeter of a square.', 'code': 'def square_perimeter(side_length):\n    return 4 * side_length\n\nprint(square_perimeter(10))\nprint(square_perimeter(5))\nprint(square_perimeter(4))', 'possibility': 0.99954152442807, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert square_perimeter(10)==40': {'result': True, 'time': 0.03911280632019043, 'error': None}, 'assert square_perimeter(5)==20': {'result': True, 'time': 0.0391688346862793, 'error': None}, 'assert square_perimeter(4)==16': {'result': True, 'time': 0.03929710388183594, 'error': None}}, 'beam_rank': 2, 'p2value': 0.999770762214035}, {'problem_id': '17', 'problem_text': 'Write a function to find the perimeter of a square.', 'code': 'def square_perimeter(side):\n    return 4 * side\n\nprint(square_perimeter(10))\nprint(square_perimeter(5))\nprint(square_perimeter(4))', 'possibility': 0.9995123459950866, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert square_perimeter(10)==40': {'result': True, 'time': 0.03924918174743652, 'error': None}, 'assert square_perimeter(5)==20': {'result': True, 'time': 0.0389866828918457, 'error': None}, 'assert square_perimeter(4)==16': {'result': True, 'time': 0.038916826248168945, 'error': None}}, 'beam_rank': 3, 'p2value': 0.9997561729975433}, {'problem_id': '17', 'problem_text': 'Write a function to find the perimeter of a square.', 'code': 'def square_perimeter(side):\n    return 4 * side\n\n# Test cases\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16 \n\nprint("All test cases pass")', 'possibility': 0.9989792397224713, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert square_perimeter(10)==40': {'result': True, 'time': 0.047870635986328125, 'error': None}, 'assert square_perimeter(5)==20': {'result': True, 'time': 0.04767560958862305, 'error': None}, 'assert square_perimeter(4)==16': {'result': True, 'time': 0.04046368598937988, 'error': None}}, 'beam_rank': 4, 'p2value': 0.9994896198612356}, {'problem_id': '78', 'problem_text': 'Write a python function to find number of integers with odd number of set bits.', 'code': "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count\n\n# Test cases\nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8", 'possibility': 0.9996799911695322, 'pass_rate': 0.0, 'passed_tests': 0, 'total_tests': 3, 'test_results': {'assert count_With_Odd_SetBits(5) == 3': {'result': False, 'time': 0.041159629821777344, 'error': None}, 'assert count_With_Odd_SetBits(10) == 5': {'result': False, 'time': 0.040715694427490234, 'error': None}, 'assert count_With_Odd_SetBits(15) == 8': {'result': False, 'time': 0.04062533378601074, 'error': None}}, 'beam_rank': 2, 'p2value': 0.4998399955847661}, {'problem_id': '24', 'problem_text': 'Write a function to convert the given binary number to its decimal equivalent.', 'code': 'def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal(100))\nprint(binary_to_decimal(1011))\nprint(binary_to_decimal(1101101))', 'possibility': 0.9997360581827601, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert binary_to_decimal(100) == 4': {'result': True, 'time': 0.04123258590698242, 'error': None}, 'assert binary_to_decimal(1011) == 11': {'result': True, 'time': 0.040956735610961914, 'error': None}, 'assert binary_to_decimal(1101101) == 109': {'result': True, 'time': 0.04691910743713379, 'error': None}}, 'beam_rank': 2, 'p2value': 0.9998680290913801}, {'problem_id': '14', 'problem_text': 'Write a python function to find the volume of a triangular prism.', 'code': 'Here is a Python function that calculates the volume of a triangular prism:\n\n```python\ndef find_Volume(a, b, c):\n    import math\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the volume\n    volume = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return volume\n```\n\nYou can use the function as follows:\n\n```python\nprint(find_Volume(10,8,6))  # Output: 240.0\nprint(find_Volume(3,2,2))   # Output: 6.0\nprint(find_Volume(1,2,1))   # Output: 1.0\n```', 'possibility': 0.9996950781202503, 'pass_rate': 0.0, 'passed_tests': 0, 'total_tests': 3, 'test_results': {'assert find_Volume(10,8,6) == 240': {'result': False, 'time': 0.05024981498718262, 'error': None}, 'assert find_Volume(3,2,2) == 6': {'result': False, 'time': 0.042760372161865234, 'error': None}, 'assert find_Volume(1,2,1) == 1': {'result': False, 'time': 0.04235267639160156, 'error': None}}, 'beam_rank': 2, 'p2value': 0.49984753906012513}, {'problem_id': '88', 'problem_text': 'Write a function to get the frequency of the elements in a list.', 'code': 'def freq_count(lst):\n    return {i: lst.count(i) for i in lst}\n\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))\nprint(freq_count([1,2,3,4,3,2,4,1,3,1,4]))\nprint(freq_count([5,6,7,4,9,10,4,5,6,7,9,5]))', 'possibility': 0.9998838756008983, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ': {'result': True, 'time': 0.040717363357543945, 'error': None}, 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ': {'result': True, 'time': 0.04072380065917969, 'error': None}, 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ': {'result': True, 'time': 0.04051017761230469, 'error': None}}, 'beam_rank': 4, 'p2value': 0.9999419378004492}, {'problem_id': '41', 'problem_text': 'Write a function to filter even numbers using lambda function.', 'code': 'def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Test cases\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]', 'possibility': 0.9998994336045586, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]': {'result': True, 'time': 0.06072425842285156, 'error': None}, 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]': {'result': True, 'time': 0.05135798454284668, 'error': None}, 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]': {'result': True, 'time': 0.04697251319885254, 'error': None}}, 'beam_rank': 0, 'p2value': 0.9999497168022793}, {'problem_id': '38', 'problem_text': 'Write a function to find the division of first even and odd number of a given list.', 'code': 'def div_even_odd(lst):\n    count_even = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even / count_odd if count_odd != 0 else None\n\nprint(div_even_odd([1,3,5,7,4,1,6,8]))\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10]))\nprint(div_even_odd([1,5,7,9,10]))', 'possibility': 0.9997820160999841, 'pass_rate': 0.0, 'passed_tests': 0, 'total_tests': 3, 'test_results': {'assert div_even_odd([1,3,5,7,4,1,6,8])==4': {'result': False, 'time': 0.05315041542053223, 'error': None}, 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2': {'result': False, 'time': 0.04546618461608887, 'error': None}, 'assert div_even_odd([1,5,7,9,10])==10': {'result': False, 'time': 0.04180765151977539, 'error': None}}, 'beam_rank': 0, 'p2value': 0.49989100804999204}, {'problem_id': '35', 'problem_text': 'Write a function to find the n-th rectangular number.', 'code': 'Here is a Python function that calculates the n-th rectangular number:\n\n```python\ndef find_rect_num(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\n# Test cases\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42\n```\n\nThe function `find_rect_num(n)` calculates the n-th rectangular number using the formula `(n * (n + 1) * (2 * n + 1) // 6)`. This formula is derived from the formula for the sum of an arithmetic series, which is `(n/2) * (first_term + last_term)`.', 'possibility': 0.9994509578990045, 'pass_rate': 0.0, 'passed_tests': 0, 'total_tests': 3, 'test_results': {'assert find_rect_num(4) == 20': {'result': False, 'time': 0.041873931884765625, 'error': None}, 'assert find_rect_num(5) == 30': {'result': False, 'time': 0.0400540828704834, 'error': None}, 'assert find_rect_num(6) == 42': {'result': False, 'time': 0.04644465446472168, 'error': None}}, 'beam_rank': 4, 'p2value': 0.49972547894950226}, {'problem_id': '27', 'problem_text': 'Write a python function to remove all digits from a list of strings.', 'code': "def remove(lst):\n    return [''.join(filter(str.isalpha, word)) for word in lst]\n\nprint(remove(['4words', '3letters', '4digits']))\nprint(remove(['28Jan','12Jan','11Jan']))\nprint(remove(['wonder1','wonder2','wonder3']))", 'possibility': 0.999768077842601, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {"assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']": {'result': True, 'time': 0.04846954345703125, 'error': None}, "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']": {'result': True, 'time': 0.04010009765625, 'error': None}, "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']": {'result': True, 'time': 0.04004335403442383, 'error': None}}, 'beam_rank': 1, 'p2value': 0.9998840389213005}, {'problem_id': '88', 'problem_text': 'Write a function to get the frequency of the elements in a list.', 'code': 'def freq_count(lst):\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))\nprint(freq_count([1,2,3,4,3,2,4,1,3,1,4]))\nprint(freq_count([5,6,7,4,9,10,4,5,6,7,9,5]))', 'possibility': 0.9999010648782563, 'pass_rate': 1.0, 'passed_tests': 3, 'total_tests': 3, 'test_results': {'assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ': {'result': True, 'time': 0.048979759216308594, 'error': None}, 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ': {'result': True, 'time': 0.042301177978515625, 'error': None}, 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ': {'result': True, 'time': 0.04144120216369629, 'error': None}}, 'beam_rank': 2, 'p2value': 0.9999505324391281}, {'problem_id': '23', 'problem_text': 'Write a python function to find the maximum sum of elements of list in a list of lists.', 'code': 'def maximum_Sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        max_sum += max(sublist)\n    return max_sum\n\n# Test cases\nprint(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])) # 33\nprint(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])) # 6\nprint(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])) # 19', 'possibility': 0.9998710499948886, 'pass_rate': 0.3333333333333333, 'passed_tests': 1, 'total_tests': 3, 'test_results': {'assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33': {'result': False, 'time': 0.0421137809753418, 'error': None}, 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6': {'result': True, 'time': 0.041657209396362305, 'error': None}, 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19': {'result': False, 'time': 0.04147672653198242, 'error': None}}, 'beam_rank': 2, 'p2value': 0.6666021916641109}]
📁 结果已保存到: experiments/mbpp/results/btp_experiment_results_20250719_074244.json
