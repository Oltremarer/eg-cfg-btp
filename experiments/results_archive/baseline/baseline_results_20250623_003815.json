{
  "experiment_config": {
    "model_name": "deepseek-ai/deepseek-coder-1.3b-instruct",
    "dataset": "mbpp",
    "num_samples": 2,
    "temperature": 0.7,
    "max_problems": 3,
    "use_openai": false
  },
  "results": {
    "11": {
      "problem": {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
          "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
          "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
          "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
          "assert remove_Occ(\"\",\"l\") == \"\""
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_Occ(s, c):\n    # \u4f60\u7684\u4ee3\u7801\u5728\u8fd9\u91cc",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": false,
              "time": 0.0983579158782959,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": false,
              "time": 0.091796875,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": false,
              "time": 0.21315693855285645,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def remove_Occ(s, c):\n    # \u9996\u5148\u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n    if not s:\n        return s\n    \n    # \u68c0\u67e5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u8981\u5220\u9664\u7684\u5b57\u7b26\n    if s[0] == c or s[-1] == c:\n        return s[1:-1]\n\n    # \u5982\u679c\u5b57\u7b26\u4e0d\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u6216\u8005\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u79fb\u9664\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n    return s\n\nprint(remove_Occ(\"hello\",\"l\"))\nprint(remove_Occ(\"abcda\",\"a\"))\nprint(remove_Occ(\"PHP\",\"P\"))",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": false,
              "time": 0.10944485664367676,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.14137697219848633,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.12904977798461914,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 0.6666666666666666,
      "any_fully_passed": false
    },
    "12": {
      "problem": {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
          "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
          "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
          "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def sort_matrix(matrix):\n    # \u5c06\u6bcf\u4e00\u884c\u6620\u5c04\u5230\u5176\u548c\n    sums = [(sum(row), row) for row in matrix]\n    # \u5bf9\u884c\u8fdb\u884c\u6392\u5e8f\n    sums.sort()\n    # \u8fd4\u56de\u6392\u5e8f\u540e\u7684\u77e9\u9635\n    return [sorted_row[1] for sorted_row in sums]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.10703873634338379,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.1496875286102295,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.12815451622009277,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def sort_matrix(matrix):\n    sum_list = [sum(row) for row in matrix]\n    sorted_matrix = sorted(matrix, key=sum_list.get)\n    return sorted_matrix",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": false,
              "time": 0.1221930980682373,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": false,
              "time": 0.12533283233642578,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": false,
              "time": 0.10640692710876465,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "13": {
      "problem": {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
          "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
          "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
          "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def count_common(word_list):\n    word_dict = {}\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    return sorted(word_dict.items(), key=lambda item: item[1], reverse=True)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": false,
              "time": 0.10349512100219727,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": false,
              "time": 0.14163923263549805,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": false,
              "time": 0.13091301918029785,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def count_common(words):\n    pass  # \u7528\u4f60\u7684\u4ee3\u7801\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": false,
              "time": 0.13982200622558594,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": false,
              "time": 0.11135697364807129,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": false,
              "time": 0.12476539611816406,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    }
  },
  "metrics": {
    "pass@1": 0.3333333333333333,
    "pass@5": 0.0,
    "pass@10": 0.0
  },
  "timestamp": "20250623_003815"
}