{
  "experiment_config": {
    "model_name": "gpt-3.5-turbo",
    "dataset": "mbpp",
    "num_samples": 3,
    "temperature": 0.8,
    "max_problems": 5,
    "use_openai": true
  },
  "results": {
    "11": {
      "problem": {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
          "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
          "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
          "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
          "assert remove_Occ(\"\",\"l\") == \"\""
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def remove_Occ(s, c):\n    return s.replace(c, '', 1).rsplit(c, 1)[0]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def remove_Occ(input_str, char):\n    first_occ = input_str.find(char)\n    last_occ = input_str.rfind(char)\n    \n    if first_occ != -1:\n        input_str = input_str[:first_occ] + input_str[first_occ+1:]\n        \n    if last_occ != -1:\n        input_str = input_str[:last_occ] + input_str[last_occ+1:]\n        \n    return input_str",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "12": {
      "problem": {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
          "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
          "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
          "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "13": {
      "problem": {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
          "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
          "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
          "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(4)\n    return most_common",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n            \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "14": {
      "problem": {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
          "assert find_Volume(10,8,6) == 240",
          "assert find_Volume(3,2,2) == 6",
          "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "15": {
      "problem": {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
          "assert split_lowerstring(\"AbCd\")==['bC','d']",
          "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
          "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n            temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    }
  },
  "metrics": {
    "pass@1": 0.0,
    "pass@5": 0.0,
    "pass@10": 0.0
  },
  "timestamp": "20250621_222110"
}