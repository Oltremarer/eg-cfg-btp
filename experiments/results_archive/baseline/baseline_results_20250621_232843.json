{
  "experiment_config": {
    "model_name": "gpt-3.5-turbo",
    "dataset": "mbpp",
    "num_samples": 10,
    "temperature": 0.8,
    "max_problems": 10,
    "use_openai": true
  },
  "results": {
    "11": {
      "problem": {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
          "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
          "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
          "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
          "assert remove_Occ(\"\",\"l\") == \"\""
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_Occ(string, char):\n    first_occ = string.find(char)\n    last_occ = string.rfind(char)\n    \n    if first_occ != -1:\n        string = string[:first_occ] + string[first_occ+1:]\n    if last_occ != -1:\n        string = string[:last_occ] + string[last_occ+1:]\n    \n    return string",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": false,
              "time": 0.06305146217346191,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": false,
              "time": 0.05580902099609375,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": false,
              "time": 0.05510067939758301,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def remove_Occ(s, char):\n    first_occ = s.find(char)\n    last_occ = s.rfind(char)\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.07300019264221191,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.05399966239929199,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.053000688552856445,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def remove_Occ(string, char):\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n    else:\n        return string",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06999635696411133,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.055999040603637695,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.053000688552856445,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def remove_Occ(s, c):\n    first_index = s.find(c)\n    last_index = s.rfind(c)\n    if first_index != -1 and last_index != -1:\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    else:\n        return s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.061000823974609375,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.05699920654296875,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.054000139236450195,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def remove_Occ(s, c):\n    index1 = s.find(c)\n    index2 = s.rfind(c)\n    return s[:index1] + s[index1+1:index2] + s[index2+1:] if index1 != -1 and index2 != -1 else s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06500005722045898,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.09787917137145996,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.05955338478088379,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def remove_Occ(s, char):\n    first_occ = s.find(char)\n    last_occ = s.rfind(char)\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.0580291748046875,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.04899907112121582,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.045998334884643555,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06501293182373047,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.05299878120422363,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.0554041862487793,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06446099281311035,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.06299972534179688,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.06917333602905273,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def remove_Occ(s, ch):\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06352758407592773,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.10096573829650879,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.05679607391357422,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def remove_Occ(string, char):\n    first_occ = string.find(char)\n    last_occ = string.rfind(char)\n    \n    if first_occ != -1 and last_occ != -1:\n        return string[:first_occ] + string[first_occ+1:last_occ] + string[last_occ+1:]\n    else:\n        return string",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"": {
              "result": true,
              "time": 0.06499767303466797,
              "error": null
            },
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"": {
              "result": true,
              "time": 0.05604362487792969,
              "error": null
            },
            "assert remove_Occ(\"PHP\",\"P\") == \"H\"": {
              "result": true,
              "time": 0.05304265022277832,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "12": {
      "problem": {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
          "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
          "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
          "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.05946803092956543,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.05463361740112305,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.055983781814575195,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.05422091484069824,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.05099964141845703,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04799914360046387,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.08800339698791504,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.1309981346130371,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.06399989128112793,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.05399918556213379,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.046999454498291016,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.048742055892944336,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.055123090744018555,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.050815582275390625,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04836845397949219,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.055036067962646484,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.047045230865478516,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04703664779663086,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.05801844596862793,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.04998183250427246,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04803633689880371,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.055544137954711914,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.05163884162902832,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04855179786682129,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.056000709533691406,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.04800081253051758,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.04599928855895996,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]": {
              "result": true,
              "time": 0.05900001525878906,
              "error": null
            },
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]": {
              "result": true,
              "time": 0.05000042915344238,
              "error": null
            },
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]": {
              "result": true,
              "time": 0.047002553939819336,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "13": {
      "problem": {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
          "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
          "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
          "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_word_count[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.07289266586303711,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.054999351501464844,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05499887466430664,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n            \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    most_common = []\n    for word, count in sorted_word_count:\n        most_common.append((word, count))\n        \n    return most_common[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.0660395622253418,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.055960655212402344,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05600118637084961,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    most_common = []\n    for word, count in sorted_word_count:\n        most_common.append((word, count))\n    \n    return most_common[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.12818503379821777,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.06839227676391602,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05538034439086914,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.06509232521057129,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.06098198890686035,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.06650400161743164,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(4)\n    return most_common",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.12288522720336914,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.0650017261505127,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.07199811935424805,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(4)\n    return most_common",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.0720212459564209,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.05699777603149414,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05503654479980469,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_word_count[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.10806870460510254,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.05606198310852051,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.056203603744506836,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(4)\n    return most_common",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.07107210159301758,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.06103944778442383,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05700111389160156,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]  # Return the top 4 most common words, change the number if needed.",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.06400203704833984,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.056036949157714844,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.06196165084838867,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def count_common(words):\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    \n    sorted_freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_freq[:4]",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]": {
              "result": true,
              "time": 0.07200765609741211,
              "error": null
            },
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]": {
              "result": true,
              "time": 0.05404949188232422,
              "error": null
            },
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]": {
              "result": true,
              "time": 0.05595135688781738,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "14": {
      "problem": {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
          "assert find_Volume(10,8,6) == 240",
          "assert find_Volume(3,2,2) == 6",
          "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def find_Volume(base, height, depth):\n    return (1/2) * base * height * depth",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.07799625396728516,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.06000065803527832,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.05899953842163086,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.06603598594665527,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.05552029609680176,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.05419158935546875,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.0650029182434082,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.05703544616699219,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.06501507759094238,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.05501747131347656,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.04701805114746094,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.049950361251831055,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.05704355239868164,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.07095909118652344,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.07598996162414551,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.07597827911376953,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.06299877166748047,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.0670018196105957,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.06599926948547363,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.06200456619262695,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.04903244972229004,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.05299735069274902,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.05303001403808594,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.047029733657836914,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.05599689483642578,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.049044132232666016,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.04600119590759277,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert find_Volume(10,8,6) == 240": {
              "result": true,
              "time": 0.07556843757629395,
              "error": null
            },
            "assert find_Volume(3,2,2) == 6": {
              "result": true,
              "time": 0.04999804496765137,
              "error": null
            },
            "assert find_Volume(1,2,1) == 1": {
              "result": true,
              "time": 0.04600214958190918,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "15": {
      "problem": {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
          "assert split_lowerstring(\"AbCd\")==['bC','d']",
          "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
          "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.0659942626953125,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.06000089645385742,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.057996511459350586,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n            current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.06599783897399902,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.06100058555603027,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.05399942398071289,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = ''\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n            temp = ''\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.06401586532592773,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.05799984931945801,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.05299997329711914,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.07000041007995605,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.09565448760986328,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.05800223350524902,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def split_lowerstring(s):\n    result = []\n    substring = \"\"\n    for char in s:\n        if char.islower():\n            substring += char\n        else:\n            if substring:\n                result.append(substring)\n                substring = \"\"\n    if substring:\n        result.append(substring)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.06300091743469238,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.059000253677368164,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.05399942398071289,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = ''\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = ''\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.06800580024719238,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.05399942398071289,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.05299973487854004,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.06000089645385742,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.046999454498291016,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.045999765396118164,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.0650022029876709,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.04899930953979492,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.046999216079711914,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n            current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.0640096664428711,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.04900002479553223,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.047000885009765625,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n    if current:\n        result.append(current)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "test_results": {
            "assert split_lowerstring(\"AbCd\")==['bC','d']": {
              "result": false,
              "time": 0.05699872970581055,
              "error": null
            },
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']": {
              "result": false,
              "time": 0.06007575988769531,
              "error": null
            },
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']": {
              "result": false,
              "time": 0.049582719802856445,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "16": {
      "problem": {
        "task_id": 16,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
          "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
          "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
          "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08212113380432129,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.12668848037719727,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": false,
              "time": 0.07545304298400879,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08699917793273926,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.0728764533996582,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": false,
              "time": 0.07097363471984863,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08700251579284668,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.07103466987609863,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.06996417045593262,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08102750778198242,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.07300066947937012,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.11983847618103027,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.07899880409240723,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.06304049491882324,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.06299972534179688,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08989548683166504,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.07144832611083984,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.06999993324279785,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08500123023986816,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.0999298095703125,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": false,
              "time": 0.07465791702270508,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def text_lowercase_underscore(s):\n    import re\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08576440811157227,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.07400226593017578,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.07399988174438477,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08099842071533203,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.06797122955322266,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": false,
              "time": 0.0648810863494873,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def text_lowercase_underscore(s):\n    import re\n    if re.search(r'[a-z]_[a-z]', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')": {
              "result": true,
              "time": 0.08100414276123047,
              "error": null
            },
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')": {
              "result": true,
              "time": 0.0720071792602539,
              "error": null
            },
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')": {
              "result": false,
              "time": 0.07300209999084473,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "17": {
      "problem": {
        "task_id": 17,
        "text": "Write a function to find the perimeter of a square.",
        "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "test_list": [
          "assert square_perimeter(10)==40",
          "assert square_perimeter(5)==20",
          "assert square_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def square_perimeter(side):\n    return 4 * side",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.07393288612365723,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.055106401443481445,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.05517578125,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def square_perimeter(side):\n    return side * 4",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.07103466987609863,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.05696868896484375,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.05563235282897949,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def square_perimeter(side):\n    return 4 * side",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.058126211166381836,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.05399966239929199,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.04800224304199219,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def square_perimeter(side_length):\n    return side_length * 4",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.07004642486572266,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.05304145812988281,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.053957462310791016,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.06299948692321777,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.05723214149475098,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.05803394317626953,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.05700063705444336,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.05199885368347168,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.06067919731140137,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def square_perimeter(side_length):\n    return side_length * 4",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.05600118637084961,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.051000118255615234,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.04599928855895996,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def square_perimeter(side):\n    return 4 * side",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.0589447021484375,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.050290584564208984,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.04578351974487305,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def square_perimeter(side_length):\n    return side_length * 4",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.05500292778015137,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.048986196517944336,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.04496574401855469,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert square_perimeter(10)==40": {
              "result": true,
              "time": 0.06005144119262695,
              "error": null
            },
            "assert square_perimeter(5)==20": {
              "result": true,
              "time": 0.04797506332397461,
              "error": null
            },
            "assert square_perimeter(4)==16": {
              "result": true,
              "time": 0.049002885818481445,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "18": {
      "problem": {
        "task_id": 18,
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_list": [
          "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
          "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
          "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([c for c in str1 if c not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.06009674072265625,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.05499982833862305,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.05300021171569824,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.06694912910461426,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.0560002326965332,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.05547738075256348,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.06833529472351074,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.05793881416320801,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.056160926818847656,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.059258222579956055,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.048961639404296875,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.04500150680541992,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.05500006675720215,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.05099964141845703,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.044999122619628906,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.05700206756591797,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.047998905181884766,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.04700064659118652,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.0559995174407959,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.051000118255615234,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.04499936103820801,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.06369876861572266,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.04700040817260742,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.04599952697753906,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join([char for char in string1 if char not in string2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.06405091285705566,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.05424952507019043,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.053406715393066406,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'": {
              "result": true,
              "time": 0.058681488037109375,
              "error": null
            },
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'": {
              "result": true,
              "time": 0.04604768753051758,
              "error": null
            },
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ": {
              "result": true,
              "time": 0.04599928855895996,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "19": {
      "problem": {
        "task_id": 19,
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "test_list": [
          "assert test_duplicate(([1,2,3,4,5]))==False",
          "assert test_duplicate(([1,2,3,4, 4]))==True",
          "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def test_duplicate(nums):\n    if len(set(nums)) == len(nums):\n        return False\n    else:\n        return True",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.06266140937805176,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.08846712112426758,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.09199857711791992,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.08700060844421387,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.07199835777282715,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.07500171661376953,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.10200142860412598,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.069000244140625,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.06999826431274414,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.07800436019897461,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.05597734451293945,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.049042463302612305,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.06699728965759277,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.05899786949157715,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.056998491287231445,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def test_duplicate(arr):\n    return len(set(arr)) != len(arr)",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.07703208923339844,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.06000089645385742,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.05700182914733887,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.06179213523864746,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.05108928680419922,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.04932045936584473,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.06102323532104492,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.052026987075805664,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.047003746032714844,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.06300210952758789,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.05800199508666992,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.04800534248352051,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def test_duplicate(nums):\n    return len(set(nums)) != len(nums)",
          "passed_tests": 3,
          "total_tests": 3,
          "pass_rate": 1.0,
          "fully_passed": true,
          "test_results": {
            "assert test_duplicate(([1,2,3,4,5]))==False": {
              "result": true,
              "time": 0.07204365730285645,
              "error": null
            },
            "assert test_duplicate(([1,2,3,4, 4]))==True": {
              "result": true,
              "time": 0.05600404739379883,
              "error": null
            },
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True": {
              "result": true,
              "time": 0.05401968955993652,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 1.0,
      "any_fully_passed": true
    },
    "20": {
      "problem": {
        "task_id": 20,
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "test_list": [
          "assert is_woodall(383) == True",
          "assert is_woodall(254) == False",
          "assert is_woodall(200) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert is_woodall(32212254719) == True",
          "assert is_woodall(32212254718) == False",
          "assert is_woodall(159) == True"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def is_woodall(num):\n    product = 1\n    i = 1\n    while product < num:\n        product = i * (i + 1)\n        if product == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.06442737579345703,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.055036067962646484,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.05300188064575195,
              "error": null
            }
          }
        },
        {
          "solution_id": 1,
          "solution": "def is_woodall(num):\n    result = 1\n    i = 1\n    while result < num:\n        result = i * (i + 1)\n        if result == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.06499981880187988,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.0991365909576416,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.05546116828918457,
              "error": null
            }
          }
        },
        {
          "solution_id": 2,
          "solution": "def is_woodall(n):\n    sum = 1\n    i = 1\n    while sum < n:\n        i += 1\n        sum = i * (i - 1)\n        if sum == n:\n            return True\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.0680398941040039,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.05699920654296875,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.12125062942504883,
              "error": null
            }
          }
        },
        {
          "solution_id": 3,
          "solution": "def is_woodall(num):\n    for i in range(1, num+1):\n        if i*(i+1) == num:\n            return True\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.14699983596801758,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.055034637451171875,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.05299997329711914,
              "error": null
            }
          }
        },
        {
          "solution_id": 4,
          "solution": "def is_woodall(n):\n    prod = 1\n    k = 1\n    while prod < n:\n        prod = k * (2**k - 1)\n        if prod == n:\n            return True\n        k += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.07090377807617188,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.0530393123626709,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.054042816162109375,
              "error": null
            }
          }
        },
        {
          "solution_id": 5,
          "solution": "def is_woodall(n):\n    i = 1\n    while i * (i + 1) <= n:\n        if i * (i + 1) == n:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.06605362892150879,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.1096339225769043,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.05599665641784668,
              "error": null
            }
          }
        },
        {
          "solution_id": 6,
          "solution": "def is_woodall(num):\n    result = 1\n    i = 1\n    while result < num:\n        result = i * (i + 1)\n        if result == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.05600404739379883,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.05099654197692871,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.0449671745300293,
              "error": null
            }
          }
        },
        {
          "solution_id": 7,
          "solution": "def is_woodall(num):\n    result = 1\n    i = 1\n    while result < num:\n        result = i * (i + 1)\n        if result == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.05403780937194824,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.0579984188079834,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.04604172706604004,
              "error": null
            }
          }
        },
        {
          "solution_id": 8,
          "solution": "def is_woodall(num):\n    if num == 1:\n        return True\n    for i in range(1, num):\n        if i * (i + 1) == num:\n            return True\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.10283136367797852,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.056142568588256836,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.055341482162475586,
              "error": null
            }
          }
        },
        {
          "solution_id": 9,
          "solution": "def is_woodall(num):\n    product = 1\n    i = 1\n    while product < num:\n        product = i * (i + 1)\n        if product == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 2,
          "total_tests": 3,
          "pass_rate": 0.6666666666666666,
          "fully_passed": false,
          "test_results": {
            "assert is_woodall(383) == True": {
              "result": false,
              "time": 0.06004214286804199,
              "error": null
            },
            "assert is_woodall(254) == False": {
              "result": true,
              "time": 0.04900002479553223,
              "error": null
            },
            "assert is_woodall(200) == False": {
              "result": true,
              "time": 0.0480349063873291,
              "error": null
            }
          }
        }
      ],
      "best_pass_rate": 0.6666666666666666,
      "any_fully_passed": false
    }
  },
  "metrics": {
    "pass@1": 0.8,
    "pass@5": 0.8,
    "pass@10": 0.8
  },
  "timestamp": "20250621_232843"
}