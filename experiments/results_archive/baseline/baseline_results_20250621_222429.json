{
  "experiment_config": {
    "model_name": "gpt-3.5-turbo",
    "dataset": "mbpp",
    "num_samples": 10,
    "temperature": 0.8,
    "max_problems": 20,
    "use_openai": true
  },
  "results": {
    "11": {
      "problem": {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
          "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
          "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
          "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
          "assert remove_Occ(\"\",\"l\") == \"\""
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_Occ(s, char):\n    first_occ = s.find(char)\n    last_occ = s.rfind(char)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.index(char)\n    last_occurrence = len(s) - s[::-1].index(char) - 1\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def remove_Occ(s, char):\n    first_occ = s.index(char)\n    last_occ = s.rindex(char)\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.index(char)\n    last_occurrence = s.rindex(char)\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def remove_Occ(s, c):\n    first_occ = s.find(c)\n    last_occ = s.rfind(c)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def remove_Occ(s, char):\n    s = s.replace(char, '', 1)\n    s = s[:s.rfind(char)] + s[s.rfind(char)+1:]\n    return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def remove_Occ(s, c):\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    else:\n        return s",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def remove_Occ(s, char):\n    return s.replace(char, \"\", 1).rsplit(char, 1)[0] if s.count(char) >= 2 else s.replace(char, \"\")",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def remove_Occ(s, char):\n    return s.replace(char, \"\", 1).rsplit(char, 1)[0]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "12": {
      "problem": {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
          "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
          "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
          "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "13": {
      "problem": {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
          "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
          "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
          "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    most_common_words = [(word, count) for word, count in sorted_word_count if count == sorted_word_count[0][1]]\n    \n    return most_common_words",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def count_common(words):\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    \n    most_common = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    return most_common[:4] if len(most_common) >= 4 else most_common",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    most_common = []\n    for word, count in sorted_word_count:\n        most_common.append((word, count))\n    \n    return most_common[:4]  # Return top 4 most common words\n\n# \u6d4b\u8bd5\u7528\u4f8b\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    most_common = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return most_common[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4] if len(sorted_word_count) >= 4 else sorted_word_count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_word_count[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_words[:4]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "14": {
      "problem": {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
          "assert find_Volume(10,8,6) == 240",
          "assert find_Volume(3,2,2) == 6",
          "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def find_Volume(base, height, depth):\n    return 0.5 * base * height * depth",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def find_Volume(base, height, depth):\n    return (1/2) * base * height * depth",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def find_Volume(base, height, depth):\n    return 0.5 * base * height * depth",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "15": {
      "problem": {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
          "assert split_lowerstring(\"AbCd\")==['bC','d']",
          "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
          "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def split_lowerstring(s):\n    return [''.join([c for c in s[i:] if c.islower()]) for i in range(len(s)) if s[i].isupper()]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n            temp = \"\"\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def split_lowerstring(s):\n    return [''.join(x for x in s.split(c) if x.islower()) for c in s if c.isupper()]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n            temp = \"\"\n    if temp:\n        result.append(temp)\n    \n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = ''\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = ''\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def split_lowerstring(s):\n    result = []\n    curr = ''\n    for char in s:\n        if char.islower():\n            curr += char\n        else:\n            if curr:\n                result.append(curr)\n                curr = ''\n    if curr:\n        result.append(curr)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = ''\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = ''\n    if temp:\n        result.append(temp)\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def split_lowerstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = \"\"\n    if temp:\n        result.append(temp)\n    \n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "16": {
      "problem": {
        "task_id": 16,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
          "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
          "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
          "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'[a-z]_[a-z]', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'[a-z]_[a-z]', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'[a-z]_[a-z]', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "17": {
      "problem": {
        "task_id": 17,
        "text": "Write a function to find the perimeter of a square.",
        "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "test_list": [
          "assert square_perimeter(10)==40",
          "assert square_perimeter(5)==20",
          "assert square_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def square_perimeter(side):\n    return 4 * side",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def square_perimeter(side_length):\n    return 4 * side_length",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "18": {
      "problem": {
        "task_id": 18,
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_list": [
          "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
          "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
          "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([ch for ch in s1 if ch not in s2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join(char for char in str1 if char not in str2)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([ch for ch in str1 if ch not in str2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join([char for char in string1 if char not in string2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join(char for char in str1 if char not in str2)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "19": {
      "problem": {
        "task_id": 19,
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "test_list": [
          "assert test_duplicate(([1,2,3,4,5]))==False",
          "assert test_duplicate(([1,2,3,4, 4]))==True",
          "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def test_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def test_duplicate(arr):\n    return len(set(arr)) != len(arr)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def test_duplicate(arr):\n    return len(set(arr)) != len(arr)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def test_duplicate(arr):\n    return len(set(arr)) != len(arr)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def test_duplicate(arr):\n    if len(set(arr)) == len(arr):\n        return False\n    else:\n        return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "20": {
      "problem": {
        "task_id": 20,
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "test_list": [
          "assert is_woodall(383) == True",
          "assert is_woodall(254) == False",
          "assert is_woodall(200) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert is_woodall(32212254719) == True",
          "assert is_woodall(32212254718) == False",
          "assert is_woodall(159) == True"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def is_woodall(num):\n    if num <= 0:\n        return False\n    else:\n        n = 1\n        woodall_num = 1\n        while woodall_num < num:\n            n += 1\n            woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        else:\n            return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def is_woodall(num):\n    n = 1\n    while n * (n + 1) <= num:\n        if n * (n + 1) == num:\n            return True\n        n += 1\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def is_woodall(num):\n    if num <= 0:\n        return False\n    total = 1\n    i = 1\n    while total < num:\n        total = i * (2 ** i - 1)\n        if total == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def is_woodall(num):\n    if num == 1:\n        return False\n    else:\n        for i in range(1, num):\n            if i * (i + 1) == num:\n                return True\n        return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def is_woodall(num):\n    result = 1\n    for i in range(1, num):\n        if i * (i + 1) == num:\n            return True\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def is_woodall(num):\n    if num <= 1:\n        return False\n    for i in range(num):\n        if i * (i + 1) == num:\n            return True\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def is_woodall(num):\n    total = 1\n    i = 1\n    while total < num:\n        total = i * (i + 1)\n        if total == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def is_woodall(num):\n    total = 1\n    i = 1\n    while total < num:\n        total = i * (i + 1)\n        if total == num:\n            return True\n        i += 1\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def is_woodall(num):\n    for i in range(1, num):\n        if i * (i + 1) == num:\n            return True\n    return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def is_woodall(num):\n    i = 1\n    while i * (i + 1) < num:\n        i += 1\n    if i * (i + 1) == num:\n        return True\n    else:\n        return False",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "21": {
      "problem": {
        "task_id": 21,
        "text": "Write a function to find m number of multiples of n.",
        "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "test_list": [
          "assert multiples_of_num(4,3)== [3,6,9,12]",
          "assert multiples_of_num(2,5)== [5,10]",
          "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def multiples_of_num(m, n):\n    return [i*n for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def multiples_of_num(m, n):\n    return [n*i for i in range(1, m+1)]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "22": {
      "problem": {
        "task_id": 22,
        "text": "Write a function to find the first duplicate element in a given array of integers.",
        "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "test_list": [
          "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
          "assert find_first_duplicate([1, 2, 3, 4])==-1",
          "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    \n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "23": {
      "problem": {
        "task_id": 23,
        "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "test_list": [
          "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
          "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
          "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def maximum_Sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for sublist in lists:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def maximum_Sum(list_of_lists):\n    max_sum = 0\n    for inner_list in list_of_lists:\n        sum_inner_list = sum(inner_list)\n        if sum_inner_list > max_sum:\n            max_sum = sum_inner_list\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def maximum_Sum(lists):\n    return max([sum(lst) for lst in lists])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def maximum_Sum(lst):\n    return max([sum(sublist) for sublist in lst])",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def maximum_Sum(lists):\n    max_sum = 0\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n    return max_sum",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "24": {
      "problem": {
        "task_id": 24,
        "text": "Write a function to convert the given binary number to its decimal equivalent.",
        "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "test_list": [
          "assert binary_to_decimal(100) == 4",
          "assert binary_to_decimal(1011) == 11",
          "assert binary_to_decimal(1101101) == 109"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary //= 10\n        power += 1\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    \n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary = binary // 10\n        power += 1\n    \n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary //= 10\n        power += 1\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * (2 ** (len(binary_str) - 1 - i))\n\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    binary_len = len(binary_str)\n    for i in range(binary_len):\n        decimal += int(binary_str[binary_len - 1 - i]) * (2**i)\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    binary_str = str(binary_num)\n    for i in range(len(binary_str)):\n        decimal_num += int(binary_str[-1-i]) * (2 ** i)\n    return decimal_num",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[-(i+1)]) * (2**i)\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    power = 0\n    while binary_num > 0:\n        decimal_num += (binary_num % 10) * (2 ** power)\n        binary_num //= 10\n        power += 1\n    return decimal_num",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def binary_to_decimal(n):\n    return int(str(n), 2)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        rem = binary % 10\n        decimal += rem * (2 ** power)\n        binary = binary // 10\n        power += 1\n    return decimal",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "25": {
      "problem": {
        "task_id": 25,
        "text": "Write a python function to find the product of non-repeated elements in a given array.",
        "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "test_list": [
          "assert find_Product([1,1,2,3],4) == 6",
          "assert find_Product([1,2,3,1,1],5) == 6",
          "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set(arr)\n    for element in unique_elements:\n        product *= element\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set(arr)\n    for element in unique_elements:\n        product *= element\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_nums = set(arr)\n    for num in unique_nums:\n        product *= num\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set(arr)\n    for element in unique_elements:\n        product *= element\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set(arr)\n    for num in unique_elements:\n        product *= num\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def find_Product(arr, n):\n    product = 1\n    seen = set()\n    for num in arr:\n        if arr.count(num) == 1 and num not in seen:\n            product *= num\n            seen.add(num)\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def find_Product(arr, n):\n    product = 1\n    seen = set()\n    \n    for num in arr:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    \n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set()\n    for num in arr:\n        if num not in unique_elements:\n            product *= num\n            unique_elements.add(num)\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def find_Product(arr, n):\n    product = 1\n    unique_elements = set(arr)\n    for ele in unique_elements:\n        product *= ele\n    return product",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "26": {
      "problem": {
        "task_id": 26,
        "text": "Write a function to check if the given tuple list has all k elements.",
        "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "test_list": [
          "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
          "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
          "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def check_k_elements(tuple_list, k):\n    return all(len(t) == k for t in tuple_list)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def check_k_elements(tuple_list, k):\n    return all(len(t) == k for t in tuple_list)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "27": {
      "problem": {
        "task_id": 27,
        "text": "Write a python function to remove all digits from a list of strings.",
        "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "test_list": [
          "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
          "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
          "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def remove(strings):\n    return [\"\".join([char for char in string if not char.isdigit()]) for string in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def remove(strings):\n    return [\"\".join([c for c in s if not c.isdigit()]) for s in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def remove(strings):\n    return [\"\".join([char for char in string if not char.isdigit()]) for string in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def remove(strings):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def remove(str_list):\n    return [\"\".join([c for c in s if not c.isdigit()]) for s in str_list]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def remove(str_list):\n    return [\"\".join([char for char in s if not char.isdigit()]) for s in str_list]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def remove(strings):\n    return [\"\".join([c for c in s if not c.isdigit()]) for s in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def remove(strings):\n    return [\"\".join([char for char in string if not char.isdigit()]) for string in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def remove(strings):\n    return [\"\".join([char for char in string if not char.isdigit()]) for string in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def remove(strings):\n    return [\"\".join([char for char in s if not char.isdigit()]) for s in strings]",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "28": {
      "problem": {
        "task_id": 28,
        "text": "Write a python function to find binomial co-efficient.",
        "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "test_list": [
          "assert binomial_Coeff(5,2) == 10",
          "assert binomial_Coeff(4,3) == 4",
          "assert binomial_Coeff(3,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
          "assert binomial_Coeff(14,6) == 3003"
        ]
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "29": {
      "problem": {
        "task_id": 29,
        "text": "Write a python function to find the element occurring odd number of times.",
        "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "test_list": [
          "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
          "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
          "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result = result ^ arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result = result ^ arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result = result ^ arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result = result ^ arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result = result ^ arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    },
    "30": {
      "problem": {
        "task_id": 30,
        "text": "Write a python function to count all the substrings starting and ending with same characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
          "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
          "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
          "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
      },
      "solutions": [
        {
          "solution_id": 0,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 1,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 2,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 3,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 4,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 5,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 6,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 7,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 8,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        },
        {
          "solution_id": 9,
          "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count",
          "passed_tests": 0,
          "total_tests": 3,
          "pass_rate": 0.0,
          "fully_passed": false,
          "error": "string indices must be integers"
        }
      ],
      "best_pass_rate": 0.0,
      "any_fully_passed": false
    }
  },
  "metrics": {
    "pass@1": 0.0,
    "pass@5": 0.0,
    "pass@10": 0.0
  },
  "timestamp": "20250621_222429"
}